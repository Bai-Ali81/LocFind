from operator import length_hint

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import sqlite3
from bs4 import BeautifulSoup
import aiohttp
import datetime
from transliterate import translit

from bd.db import save_to_db, save_rating, get_favorites_by_user  # –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø—É—Ç—å
from gevent.libev.corecext import callback
from gpt.gptt import ask_gpt

router = Router()

class MoodSurvey(StatesGroup):
    weather = State()
    mood = State()
    time = State()
    company = State()
    city = State()



@router.message(CommandStart())
async def start(message: Message):

    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞ –≤–≤–µ–¥–∏—Ç–µ /start_survey\n'
                         f'–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ /favorites')



@router.message(Command('favorites'))
async def show_favorites(message: Message):
    user_id = message.from_user.id
    favorites = get_favorites_by_user(user_id)

    if not favorites:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–¥–µ–π ü•≤")
        return

    response = "üåü –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∏–¥–µ–∏:\n\n"
    for idx, row in enumerate(favorites, 1):
        # –¥–æ–ø—É—Å—Ç–∏–º, –≤ row[1] –ª–µ–∂–∏—Ç —Ç–µ–∫—Å—Ç –∏–¥–µ–∏ (–∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
        response += f"{idx}. {row[2]}\n"
        # suggestion = row[2]
        # response += f'{idx}. {suggestion}\n'

    await message.answer(response)

    @router.message(Command('cancel'))
    async def state_clear(message: Message, state: FSMContext):
        await state.clear()
        await message.answer('–í—ã –ø—Ä–∏–æ—Å—Ç–æ–Ω–æ–≤–∏–ª–∏ –æ–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å –Ω–∞–ø–∏—à–∏—Ç–µ /start')



@router.message(Command('start_survey'))
async def start_survey(message: Message, state: FSMContext):
        await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –≥–æ—Ä–æ–¥. –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
        await state.set_state(MoodSurvey.city)

@router.message(MoodSurvey.city)
async def city(message: Message, state: FSMContext):
    text = message.text
    translated_text = translit(text, 'ru', reversed=True)
    url = (f'https://yandex.ru/pogoda/ru/makhachkala')
    await state.update_data(url=url)
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞–Ω—Ü–∏—é —Å–µ–π—á–∞—Å –º—ã –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–≤—ã–µ—Å—Ç–∏ —Ç–≤–æ—é –ø–æ–≥–æ–¥—É')
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ Yes, –∏–ª–∏ –∂–µ /cancel')
    await state.set_state(MoodSurvey.weather)

@router.message(MoodSurvey.weather)
async def weather(message: Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        data = await state.get_data()
        async with session.get(data.get('url')) as response:
            data = await response.text()

            soup = BeautifulSoup(data, 'html.parser')
            sign = soup.find('span', class_='AppFactTemperature_sign__1MeN4').text
            value = soup.find('span', class_='AppFactTemperature_value__2qhsG').text
            degree = soup.find('span', class_='AppFactTemperature_degree__LL_2v').text
            # opisanie = soup.find('span', class_='AppFact_feels_IJoel AppFact_feels_withYesterday_yE440').text
            await message.answer(f'–ü–æ–≥–æ–¥–∞: {value}{degree}')
        now = datetime.datetime.now().strftime("%H:%M:%S")
        await message.answer(now)
        await state.update_data(time=now)
        await state.update_data(weather=f'{sign,value,degree}')
        await message.answer("–ö–∞–∫ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?(–≤–µ—Å–µ–ª–æ–µ, –≥—Ä—É—Å—Ç–Ω–æ–µ, —Å–ø–æ–∫–æ–π–Ω–æ–µ)–≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞")
        await state.set_state(MoodSurvey.mood)

@router.message(MoodSurvey.mood)
async def get_mood(message: Message, state: FSMContext):
    await state.update_data(mood=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30 –º–∏–Ω—É—Ç, 2 —á–∞—Å–∞, –≤–µ—Å—å –¥–µ–Ω—å)")
    await state.set_state(MoodSurvey.time)

@router.message(MoodSurvey.time)
async def get_time(message: Message, state: FSMContext):
    await state.update_data(time=message.text)
    await message.answer("–° –∫–µ–º —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è? (–û–¥–∏–Ω, —Å –¥—Ä—É–∑—å—è–º–∏, —Å —Å–µ–º—å—ë–π –∏ —Ç.–¥.)")
    await state.set_state(MoodSurvey.company)

@router.message(MoodSurvey.company)
async def get_company(message: Message, state: FSMContext):
    await state.update_data(company=message.text)
    data = await state.get_data()

    await message.answer("–î—É–º–∞—é –Ω–∞–¥ –∏–¥–µ–µ–π... ü§î")

    gpt_reply = await ask_gpt(
        mood=data["mood"],
        time=data["time"],
        company=data["company"],
        weather=data["weather"]
    )

    user_id = message.from_user.id
    save_to_db(user_id, data["mood"], data["time"], data["company"]) # –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    await state.update_data(suggestion=gpt_reply)

    rate_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç –î–∞", callback_data="rate_yes")],
        [InlineKeyboardButton(text="üëé –ù–µ—Ç", callback_data="rate_no")]
    ])

    await message.edit_text(f"üß† –í–æ—Ç –∏–¥–µ—è:\nüëâ {gpt_reply}\n\n–•–æ—á–µ—à—å –∑–∞–Ω–µ—Å—Ç–∏ –∏–¥–µ—é –≤ —Ç–∞–±–ª–∏—Ü—É –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?", reply_markup=rate_kb)


@router.callback_query(F.data == "rate_yes")
async def on_rate_yes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    suggestion = data.get("suggestion")

    rating_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1", callback_data="rating_1"),
         InlineKeyboardButton(text="2", callback_data="rating_2"),
         InlineKeyboardButton(text="3", callback_data="rating_3"),
         InlineKeyboardButton(text="4", callback_data="rating_4"),
         InlineKeyboardButton(text="5", callback_data="rating_5")]
    ])

    await callback.message.edit_text(
        f"üß† –í–æ—Ç –∏–¥–µ—è:\nüëâ {suggestion}\n\n–û—Ü–µ–Ω–∏ –æ—Ç 1 –¥–æ 5:",
        reply_markup=rating_kb
    )
    await callback.answer()


@router.callback_query(F.data.startswith("rating_"))
async def on_rating(callback: CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    data = await state.get_data()
    suggestion = data.get("suggestion")
    user_id = callback.from_user.id

    save_rating(user_id, suggestion, rating)

    await callback.message.edit_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {rating} ‚≠ê")
    await callback.answer()
    await state.clear()


@router.callback_query(F.data == "rate_no")
async def on_rate_no(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ üôå")
    await callback.answer()
    await state.clear()






